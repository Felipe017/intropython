'------------------------------- Bibliotescas utlizadas -----------------------------------------------------'

import matplotlib.pyplot as plt
import numpy as np
import random

'------------ Usuario insire a quantantidade de colisões e o valor do momento inicial do Foton ---------------'

numero_colisoes = int(input('Digite o numero de colisões: '))
momento_foton1 = float(input('Digite o valor do momento do fonton inicial em Mev: '))
n=0
cosseno_teta=[]
energia_eletron_final=[]
energia_foton_final=[]

'----------------------------Loop para guardar cada valor em listas -------------------------------------------'

while(numero_colisoes>n):

     def cos ():
     
          cosseno = random.randrange(-100,101)*random.random()/100 
          return cosseno
     cos=cos()

     from Particula import * # Modulo criado
     m_el=0.511 # A massa do eletron (meV)
     energia_foton1 = Particula(0,momento_foton1).energia()
     energia_eletron1 = Particula(m_el,0).energia()

     """ Encontrando as energias """
     #Definindo a energia do foton apos colisao
     energia_foton2 = ((energia_foton1)*(energia_eletron1))/(energia_eletron1 + energia_foton1*(1-cos))

     #Definindo a eneriga do eletron apos a colisao
     energia_eletron2 = energia_foton1 + energia_eletron1 - energia_foton2
     
     energia_eletron_final.append(energia_eletron2)
     cosseno_teta.append(cos)
     energia_foton_final.append(energia_foton2)

     n = n + 1

'-------------------------------Função para criar arquivo a partir das listas--------------------------------'

def tabela(nome,lista):		
    arquivo = open(nome + '.txt', 'a')
    for i in range(len(lista)):
        arquivo.write(str(lista[i]) + '\n')
    arquivo.close

tabela('Cosseno',cosseno_teta)
tabela('Energia Final do Eletron',energia_eletron_final)
tabela('Energia Final do Foton',energia_foton_final )

'-------------------------------Criação e plotagem de gráficos-----------------------------------------------'

nx = 'Cosseno'
ny = 'Energia (Mev)'
plt.plot (cosseno_teta,energia_eletron_final,'bo',cosseno_teta, energia_foton_final, 'ro')
plt.xlabel(nx)
plt.ylabel(ny)
plt.show()    

plt.figure(1)      # Cria segunda janela

plt.subplot(2,1,1) # Cria a área do gráfico de cima
plt.plot(cosseno_teta, energia_eletron_final, 'ro') # Desenha do gráfico de cima
plt.xlabel(nx)
plt.ylabel('Energia Final do Eletron (MeV)')

plt.subplot(2,1,2)   # Cria a área do segundo gráfico
plt.plot(cosseno_teta, energia_foton_final, 'bo')  # Desenha o gráfico de baixo
plt.xlabel(nx)
plt.ylabel('Energia Final do Foton (MeV)')
plt.show()


